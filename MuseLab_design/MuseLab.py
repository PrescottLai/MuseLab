# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\UI_Design.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# -*- coding: utf-8 -*-
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import *
from Muse_Here import *
from Playground import *
import sys
import webbrowser
import pygame

system_name = platform.system()
if system_name == "Windows":
    import win32api
pygame.init()
pygame.mixer.init()
sound_a = pygame.mixer.Sound("./music/BackGround_Music/Background_music16s.wav")
sound_a.play()


# CURRENT_DIR = os.path.dirname(os.path.realpath
#                               ("./music/BackGround_Music/BackgroundMusic1.wav"))
# filename = os.path.join(CURRENT_DIR, 'BackgroundMusic1.wav')
# QtMultimedia.QSound.play(filename)


class instrument_Window(QMainWindow):
    instrument_sig = pyqtSignal(int)

    def __init__(self, *args, **kwargs):
        super(instrument_Window, self).__init__(*args, **kwargs)
        self.setWindowTitle("Music Genre Type")
        self.setFixedWidth(1159)
        self.setFixedHeight(700)
        self.center()
        # self.label = QLabel(self)
        # self.label.setGeometry(0, 0, 520, 250)
        # self.label.setStyleSheet("background-image: url(./image/hea.jpg); background-color: rgba(0,0,0,0%)")
        # calling method
        self.UiComponents()
        self.string = ""
        # showing all the widgets
        self.show()
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    # method for widgets
    def UiComponents(self):
        # creating a combo box widget
        self.combo_box = QComboBox(self)
        self.combo_box.setGeometry(460, 300, 250, 50)
        self.combo_box.setMouseTracking(True)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(19)
        font.setBold(True)
        self.combo_box.setFont(font)
        # adding items to combo box
        self.combo_box.addItem("Choose Instrument Type")
        self.combo_box.addItem("    Violin Quartet 1")
        # 40, 40, 41, 42
        self.combo_box.addItem("    Violin Quartet 2")
        # 40, 40, 41, 43
        self.combo_box.addItem("      Wind Quartet")
        # 73, 68, 71, 70
        self.combo_box.addItem("      Brass Quartet")
        # 56, 56, 60, 57
        self.combo_box.addItem("    Saxophone Quartet")
        # 64, 65, 66, 67
        self.combo_box.addItem("        Pad2 + Vio.")
        # 89, 89, 41, 42
        self.combo_box.setCurrentIndex(0)
        self.combo_box.setStyleSheet("QComboBox{background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey); "
                                     "color:black;"
                                     "selection-background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey);} "
                                     "QComboBox:editable{background:rgb(220,200,230);}"
                                     "QComboBox QAbstractItemView{border: 0px; outline:0px;"
                                     "background: white "
                                     "font:22px;color:rgb(0,0,0)}"
                                     )

        button1 = QPushButton("Re-Orchestrate", self)
        button1.setGeometry(460, 225, 250, 50)
        button1.setFixedWidth(250)
        button1.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Orange LET")
        font.setPixelSize(24)
        font.setBold(True)
        font.setWeight(75)
        button1.setFont(font)
        button1.setStyleSheet("color: rgb(255, 255, 255); background-color: rgb(229, 251, 255)")
        button1.clicked.connect(self.send_Signal)

        button2 = QPushButton("", self)
        button2.setFixedWidth(200)
        button2.setFixedHeight(200)
        button2.setGeometry(10, 535, 250, 50)
        button2.setStyleSheet(
            "background-image: url(./image/Back8.png); background-repeat: no-repeat")
        button2.clicked.connect(self.back)

        # self.combo_box.activated[str].connect(self.send_Signal)

    def send_Signal(self):
        instruments = self.combo_box.currentIndex()
        print(instruments)
        if instruments != 0:
            self.instrument_sig.emit(instruments)
        else:
            label = QLabel("You need to choose one instrument type!", self)
            label.setFixedHeight(30)
            label.setFixedWidth(450)
            label.move(380, 450)
            font = QtGui.QFont()
            font.setFamily("Pyunji R")
            font.setPixelSize(23)
            font.setBold(True)
            font.setWeight(75)
            label.setFont(font)
            label.setStyleSheet(" background-image: url(./image/transparent.jpg); color: rgb(0, 0, 0);")
            label.show()

    def back(self):
        self.sub = SubWindow()
        self.sub.string = self.string
        print(self.sub.string)
        self.close()

class SubSubWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(SubSubWindow, self).__init__(*args, **kwargs)
        self.setWindowTitle("MuseLab")
        self.setFixedWidth(1159)
        self.setFixedHeight(700)
        self.center()
        self.counter = [[],[],[],[],[]] #self.counter[5][0]=..
        self.record = []
        self.label = QLabel(self)
        self.label.setGeometry(0, 0, 1159, 700)
        self.label.setStyleSheet("background-image: url(./image/melody_generate.jpg); background-color: rgba(0,0,0,0%)")
        self.UiComponents()
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)
        self.show()
        self.string = ""  # passed string from MainWindow
        print(self.string)

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def UiComponents(self):

        self.combo_boxA = QComboBox(self)
        self.combo_boxA.setGeometry(180, 180, 250, 50)
        self.combo_boxA.setMouseTracking(True)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(19)
        font.setBold(True)
        self.combo_boxA.setFont(font)
        # adding items to combo box
        self.combo_boxA.addItem("     Instrument Type")
        self.combo_boxA.addItem("        Grand Piano1")
        # 40, 40, 41, 42
        self.combo_boxA.addItem("        Grand Piano2")
        # 40, 40, 41, 43
        self.combo_boxA.addItem("          E.Grand1")
        # 73, 68, 71, 70
        self.combo_boxA.addItem("          E.Grand2")
        # 56, 56, 60, 57
        self.combo_boxA.addItem("          E.Piano1")
        # 64, 65, 66, 67
        self.combo_boxA.addItem("          E.Piano2")
        # 89, 89, 41, 42
        self.combo_boxA.addItem("        Harpsichord1")
        self.combo_boxA.addItem("        Harpsichord2")
        self.combo_boxA.addItem("           Clesta1")
        self.combo_boxA.addItem("           Clesta2")
        self.combo_boxA.setCurrentIndex(0)
        self.combo_boxA.setStyleSheet("QComboBox{background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey); "
                                     "color:black;"
                                     "selection-background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey);} "
                                     "QComboBox:editable{background:rgb(220,200,230);}"
                                     "QComboBox QAbstractItemView{border: 0px; outline:0px;"
                                     "background: white "
                                     "font:22px;color:rgb(0,0,0)}"
                                     )

        self.combo_boxB = QComboBox(self)
        self.combo_boxB.setGeometry(460, 180, 250, 50)
        self.combo_boxB.setMouseTracking(True)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(19)
        font.setBold(True)
        self.combo_boxB.setFont(font)
        # adding items to combo box
        self.combo_boxB.addItem("       Music Part")
        self.combo_boxB.addItem("       Main Melody")
        self.combo_boxB.addItem("     Counter Melody")
        self.combo_boxB.addItem("         Rhythm")
        self.combo_boxB.addItem("        Bass Part")
        self.combo_boxB.setCurrentIndex(0)
        self.combo_boxB.setStyleSheet("QComboBox{background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey); "
                                     "color:black;"
                                     "selection-background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey);} "
                                     "QComboBox:editable{background:rgb(220,200,230);}"
                                     "QComboBox QAbstractItemView{border: 0px; outline:0px;"
                                     "background: white "
                                     "font:22px;color:rgb(0,0,0)}"
                                     )

        self.combo_boxC = QComboBox(self)
        self.combo_boxC.setGeometry(740, 180, 250, 50)
        self.combo_boxC.setMouseTracking(True)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(19)
        font.setBold(True)
        self.combo_boxC.setFont(font)
        # adding items to combo box
        self.combo_boxC.addItem("      Rhythm Type")
        self.combo_boxC.addItem("         Type 1")
        self.combo_boxC.addItem("         Type 2")
        self.combo_boxC.addItem("         Type 3")
        self.combo_boxC.addItem("         Type 4")
        self.combo_boxC.setCurrentIndex(0)
        self.combo_boxC.setStyleSheet("QComboBox{background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey); "
                                     "color:black;"
                                     "selection-background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "white, stop:1 grey);} "
                                     "QComboBox:editable{background:rgb(220,200,230);}"
                                     "QComboBox QAbstractItemView{border: 0px; outline:0px;"
                                     "background: white "
                                     "font:22px;color:rgb(0,0,0)}"
                                     )

        self.labelA = QLabel("Select instruments you want below",self)
        self.labelA.setFixedHeight(30)
        self.labelA.setFixedWidth(750)
        self.labelA.move(150, 135)
        self.labelA.setAlignment(QtCore.Qt.AlignCenter)
        self.labelA.setAlignment(QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setPixelSize(23)
        font.setBold(True)
        font.setWeight(75)
        self.labelA.setFont(font)
        self.labelA.setStyleSheet("color: rgb(255, 255, 255);")

        self.button1 = QPushButton("Select Instrument", self)
        self.button1.setGeometry(150, 535, 275, 50)
        self.button1.setFixedWidth(275)
        self.button1.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.button1.setFont(font)
        self.button1.setStyleSheet("color: rgb(255, 255, 255); background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
                                     "azure, stop:1 silver);")
        self.button1.clicked.connect(self.AddInstrument)

        # Remove Instrument
        self.button2 = QPushButton("Remove Instrument", self)
        self.button2.setGeometry(540, 535, 225, 50)
        self.button2.setFixedWidth(225)
        self.button2.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button2.setFont(font)
        self.button2.setStyleSheet(
            "color: rgb(255, 255, 255); background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
            "silver, stop:1 grey);")
        self.button2.clicked.connect(self.RemoveInstrument)

        # Clear All button
        self.button3 = QPushButton("Clear All", self)
        self.button3.setGeometry(785, 535, 225, 50)
        self.button3.setFixedWidth(225)
        self.button3.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button3.setFont(font)
        self.button3.setStyleSheet(
            "color: rgb(255, 255, 255); background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
            "silver, stop:1 grey);")
        self.button3.clicked.connect(self.RemoveAll)

        # Re-orchestrate button
        self.button4 = QPushButton("Re-orchestrate", self)
        self.button4.setGeometry(450, 620, 275, 65)
        self.button4.setFixedWidth(275)
        self.button4.setFixedHeight(65)
        font.setPixelSize(28)
        self.button4.setFont(font)
        self.button4.setStyleSheet(
            "color: rgb(255, 255, 255); background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 "
            "azure, stop:1 grey);")
        self.button4.clicked.connect(self.sendmsg)

        # Back button
        self.button5 = QPushButton("", self)
        # button4.setIcon(QIcon("./image/Back1.jpg"))
        self.button5.setFixedWidth(200)
        self.button5.setFixedHeight(200)
        self.button5.setGeometry(10, 535, 250, 50)
        self.button5.setStyleSheet(
            "background-image: url(./image/Back8.png); background-repeat: no-repeat; border: 0px")
        self.button5.clicked.connect(self.Return)

        self.list_widget = QListWidget(self)
        self.list_widget.setGeometry(150, 240, 859, 275)
        self.list_widget.setLayoutMode(QListView.Batched)
        self.list_widget.setStyleSheet("QListWidget{background-color: white;}")
        self.list_widget.setFont(QFont('Pyunji R', 14))

    def sendmsg(self):
        if len(self.record) <= 0:
            self.labelA.setText("Please add at least one type of instrument!")
            self.labelA.setStyleSheet("color: red;")
        else:
            rhythm_type = self.combo_boxC.currentIndex()
            if rhythm_type != 0 and len(self.counter[3]) > 0:
                if len(self.counter) == 5:
                    self.counter.append(rhythm_type)
                    self.labelA.setText("Success!!")
                else:
                    del self.counter[-1]
                    self.counter.append(rhythm_type)
                    self.labelA.setText("Success!!")
                print("Valid case")
                # send signal and stuff below
                file_path = self.string
                instrument_list = self.counter
                while 1:
                    try:
                        MuseScore = Own_Creation(file_path, instrument_list)
                    except BaseException as e:
                        print("Error Occurs when generating the melody, new progress will start soon!!", e)
                    else:
                        break
                    finally:
                        print("Done")

                if MuseScore == 0:
                    self.sub1 = MuseScore_tip()
                    self.sub1.show()
                self.sub = SubSubWindowTip()
                self.sub.show()

            elif rhythm_type != 0 or len(self.counter[3]) > 0:
                if rhythm_type != 0:
                    if len(self.counter) > 5:
                        del self.counter[-1]
                    self.labelA.setText("You need instruments for rhythm part!")
                if len(self.counter[3]) > 0:
                    self.labelA.setText("You haven't selected the rhythm type!")
                self.labelA.setStyleSheet("color: red;")
            else:
                self.labelA.setText("Success!!")
                print("Valid case")
                if len(self.counter) > 5:
                    del self.counter[-1]
                # send signal and stuff below
                file_path = self.string
                instrument_list = self.counter
                while 1:
                    try:
                        MuseScore = Own_Creation(file_path, instrument_list)
                    except BaseException as e:
                        print("Error Occurs when generating the melody, new progress will start soon!!", e)
                    else:
                        break
                    finally:
                        print("Done")

                if MuseScore == 0:
                    self.sub1 = MuseScore_tip()
                    self.sub1.show()
                self.sub = SubSubWindowTip()
                self.sub.show()
        print(self.counter)
        print(MuseScore)
    def RemoveAll(self):
        self.list_widget.clear()
        self.counter = [[], [], [], [], []]
        self.record = []

    def RemoveInstrument(self):
        x = self.list_widget.currentRow()
        print(x)
        if len(self.record) > 0:
            tracks = self.record[x*2]
            instruments = self.record[x*2+1]
            self.record.pop(x*2+1)
            self.record.pop(x*2)
            self.counter[tracks].remove(instruments)
            item = self.list_widget.takeItem(self.list_widget.currentRow())

    def AddInstrument(self):
        instruments = self.combo_boxA.currentIndex()
        tracks = self.combo_boxB.currentIndex()
        # check if the user has chosen the instruments or tracks yet
        if instruments == 0 or tracks == 0:
            print("ERROR!!")
            # show error label and try again
            self.labelA.setText("You need to select an instrument and the track type first!")
            self.labelA.setStyleSheet("color: red;")
        else:
            display_sentence = self.combo_boxA.currentText().lstrip(" ") + " (" + self.combo_boxB.currentText().lstrip(" ") + ")"
            self.list_widget.addItem(display_sentence)
            for i in range(0,5):
                if i == tracks:
                    self.counter[i].append(instruments)
                    self.record.append(tracks)
                    self.record.append(instruments)
        print(self.counter)

    def Return(self):
        self.sub4 = SubWindow()
        self.sub4.show()
        self.close()

class SubSubWindowTip(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(SubSubWindowTip, self).__init__(*args, **kwargs)
        self.setWindowTitle("Re-orchestration Completed")
        self.setFixedWidth(520)
        self.setFixedHeight(250)
        self.center()
        self.setStyleSheet("background-image: url(./image/Dialog_Background_1.jpg);")
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)
        self.UiComponents()
        self.show()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def UiComponents(self):
        label1 = QLabel("Re-orchestration completed!", self)
        label2 = QLabel("Test it in the music/Output file!", self)
        label1.setFixedHeight(30)
        label1.setFixedWidth(335)
        label2.setFixedHeight(30)
        label2.setFixedWidth(400)
        label1.move(99, 40)
        label1.setAlignment(QtCore.Qt.AlignCenter)
        label2.move(75, 120)
        label2.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPixelSize(23)
        font.setBold(True)
        font.setWeight(75)
        label1.setFont(font)
        label2.setFont(font)
        label1.setStyleSheet("color: rgb(255, 255, 255);")
        label2.setStyleSheet("color: rgb(255, 255, 255);")

        button = QPushButton("Ok", self)
        button.setGeometry(207, 200, 170, 35)
        button.setFixedWidth(100)
        button.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button.setFont(font)
        button.setStyleSheet("color: rgb(255, 255, 255);")
        button.clicked.connect(self.CloseState)

    def CloseState(self):
        self.close()


class SubWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(SubWindow, self).__init__(*args, **kwargs)
        self.setWindowTitle("MuseLab")
        self.setFixedWidth(1159)
        self.setFixedHeight(700)
        self.center()
        self.UiComponents1()
        self.setStyleSheet("background-image: url(./image/melody_generate.jpg); background-color: rgba(0,0,0,0%);")
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)

        self.show()
        self.string = ""  # passed string from MainWindow
        print("self string = ",self.string)

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    # action called by the timer
    def do_something(self):
       # checking if the combo box is under mouse
        under1 = self.button1.underMouse()
        under2 = self.button2.underMouse()
        under3 = self.button3.underMouse()
        under1txt = "Re-orchestrates with default settings"
        under2txt = "Select instruments you want to test here"
        under3txt = "Create a new MIDI file using MuseScore"
        undertxt = ""
        # setting text to the label
        if under1 == True or under2 == True or under3 == True:
            if under1 == True:
                self.label.setText(under1txt)
            elif under2 == True:
                self.label.setText(under2txt)
            elif under3 == True:
                self.label.setText(under3txt)
            else:
                self.label.setText(undertxt)
        else:
            self.label.setText(undertxt)

    def UiComponents1(self):
        timer = QTimer(self)
        timer.timeout.connect(self.do_something)
        timer.start(100)

        self.button1 = QPushButton("M u s e Here", self)
        self.button1.setGeometry(460, 225, 250, 50)
        self.button1.setFixedWidth(250)
        self.button1.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Orange LET")
        font.setPixelSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button1.setFont(font)
        self.button1.setStyleSheet("color: rgb(255, 255, 255); background-color: rgb(229, 251, 255)")
        if self.button1.underMouse():
            print("Yes")
        self.button1.clicked.connect(self.Muse_Window)

        self.button2 = QPushButton("Pla y g rou nd", self)
        # button2.setToolTip("Choose Instruments for different parts") color problem to be fixed
        self.button2.setGeometry(460, 300, 250, 50)
        self.button2.setFixedWidth(250)
        self.button2.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Orange LET")
        font.setPixelSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button2.setFont(font)
        self.button2.setStyleSheet("color: rgb(255, 255, 255); background-color: rgb(229, 251, 255)")
        self.button2.clicked.connect(self.Playground_Window)

        self.button3 = QPushButton("M u s ic Sheet", self)
        self.button3.setGeometry(460, 375, 250, 50)
        # button3.setIcon(QIcon("./image/return-icon2.jpg"))
        self.button3.setFixedWidth(250)
        self.button3.setFixedHeight(50)
        font = QtGui.QFont()
        font.setFamily("Orange LET")
        font.setPixelSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button3.setFont(font)
        self.button3.setStyleSheet("color: rgb(0,0,0); background-color: rgb(229, 251, 255)")
        # button3.setStyleSheet(
        #     "background-image: url(./image/transparent.jpg); color: rgb(0, 0, 0);")
        self.button3.clicked.connect(self.New_Sheet)

        button4 = QPushButton("", self)
        # button4.setIcon(QIcon("./image/Back1.jpg"))
        button4.setFixedWidth(200)
        button4.setFixedHeight(200)
        button4.setGeometry(10, 535, 250, 50)
        button4.setStyleSheet(
            "background-image: url(./image/Back8.png); background-repeat: no-repeat")
        button4.clicked.connect(self.Return)

        self.label = QLabel(self)
        self.label.setFixedHeight(30)
        self.label.setFixedWidth(450)
        self.label.move(380, 467)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(23)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet(" background-image: url(./image/transparent.jpg); color: rgb(0, 0, 0);")

    def Muse_Window(self):

        sub = instrument_Window(self)
        sub.string = self.string
        self.hide()
        sub.instrument_sig.connect(self.ChordState)

        sub.show()

    def ChordState(self, connect):
        print("instrument_type: ", connect)
        print("Generating......")
        fp = self.string
        print("fp is ", self.string)
        MuseScore = melody_generate(fp, connect)
        self.sub = Retry_tip()
        self.sub.show()
        if MuseScore == 0:
            self.sub1 = MuseScore_tip()
            self.sub1.show()

    def Playground_Window(self):
        self.sub3 = SubSubWindow()
        self.sub3.string = self.string
        self.sub3.show()
        self.hide()

    @staticmethod
    def New_Sheet():
        if system_name == "Windows":
            try:
                file = win32api.ShellExecute(0, 'open', 'MuseScore3.exe', './music/空白乐谱.mscz', '', 1)
            except BaseException:
                print("打开乐谱失败")
            else:
                print("f：", file)
                if file == 42:
                    print("打开乐谱成功")
                else:
                    print("打开乐谱失敗")
            finally:
                print("try 結束")

        elif system_name == "Darwin":
            try:
                file = os.system("open -a MuseScore\ 3 ./music/空白乐谱.mscz")
            except BaseException:
                print("打开乐谱失败")
            else:
                print(file)
                if file == 0:
                    print("打开乐谱成功")
                else:
                    print("打开乐谱失敗")
            finally:
                print("try 結束")
        else:
            print("Please use this Application in Windows or Darwin/Mac system to have a better use.")

    def Return(self):
        mainWindows.show()
        self.close()


class MuseScore_tip(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(MuseScore_tip, self).__init__(*args, **kwargs)
        self.setWindowTitle("Show Score Error")
        self.setFixedWidth(530)
        self.setFixedHeight(250)
        self.center()
        self.setStyleSheet("background-image: url(./image/Dialog_Background_1.jpg);")
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)
        self.UiComponents()
        self.show()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def UiComponents(self):
        label1 = QLabel("Can't show the new music Score", self)
        label2 = QLabel("Make sure you have MuseScore3", self)
        label1.setFixedHeight(30)
        label1.setFixedWidth(335)
        label2.setFixedHeight(30)
        label2.setFixedWidth(500)
        label1.move(99, 40)
        label1.setAlignment(QtCore.Qt.AlignCenter)
        label1.setAlignment(QtCore.Qt.AlignVCenter)
        label2.move(95, 120)
        label2.setAlignment(QtCore.Qt.AlignCenter)
        label2.setAlignment(QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setPixelSize(23)
        font.setBold(True)
        font.setWeight(75)
        label1.setFont(font)
        label2.setFont(font)
        label1.setStyleSheet("color: rgb(255, 255, 255);")
        label2.setStyleSheet("color: rgb(255, 255, 255);")

        button1 = QPushButton("Download", self)
        button1.setGeometry(90, 200, 170, 35)
        button1.setFixedWidth(150)
        button1.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button1.setFont(font)
        button1.setStyleSheet("color: rgb(255, 255, 255);")
        button1.clicked.connect(self.MuseScore_website)

        button2 = QPushButton("Ok", self)
        button2.setGeometry(295, 200, 170, 35)
        button2.setFixedWidth(150)
        button2.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button2.setFont(font)
        button2.setStyleSheet("color: rgb(255, 255, 255);")
        button2.clicked.connect(self.CloseState)

    @staticmethod
    def MuseScore_website():
        webbrowser.open('https://musescore.org/zh-hans')

    def CloseState(self):
        self.close()


class Retry_tip(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(Retry_tip, self).__init__(*args, **kwargs)
        self.setWindowTitle("Re-orchestration Completed")
        self.setFixedWidth(520)
        self.setFixedHeight(250)
        self.center()
        self.setStyleSheet("background-image: url(./image/Dialog_Background_1.jpg);")
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)
        self.UiComponents()
        self.show()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def UiComponents(self):
        label1 = QLabel("Re-orchestration completed!", self)
        label2 = QLabel("Test it in the music/Output file!", self)
        label1.setFixedHeight(30)
        label1.setFixedWidth(335)
        label2.setFixedHeight(30)
        label2.setFixedWidth(400)
        label1.move(99, 40)
        label1.setAlignment(QtCore.Qt.AlignCenter)
        label2.move(75, 120)
        label2.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPixelSize(23)
        font.setBold(True)
        font.setWeight(75)
        label1.setFont(font)
        label2.setFont(font)
        label1.setStyleSheet("color: rgb(255, 255, 255);")
        label2.setStyleSheet("color: rgb(255, 255, 255);")

        button = QPushButton("Ok", self)
        button.setGeometry(207, 200, 170, 35)
        button.setFixedWidth(100)
        button.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button.setFont(font)
        button.setStyleSheet("color: rgb(255, 255, 255);")
        button.clicked.connect(self.CloseState)

    def CloseState(self):
        self.hide()

class HelpScreen(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(HelpScreen, self).__init__(*args, **kwargs)

        self.setWindowTitle("How to use the program")
        self.setFixedWidth(520)
        self.setFixedHeight(250)
        self.center()
        self.setStyleSheet("background-image: url(./image/Dialog_Background_1.jpg);")
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)
        self.UiComponents()
        self.show()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def UiComponents(self):
        self.label = QLabel("1. Provide a MIDI File to MuseLab", self)
        self.label2 = QLabel("2. Select the Music Style You Want", self)
        self.label3 = QLabel("3. Enjoy Your Music Journey!", self)
        self.label.setFixedWidth(335)
        self.label.setFixedHeight(30)
        self.label2.setFixedWidth(335)
        self.label2.setFixedHeight(30)
        self.label3.setFixedWidth(335)
        self.label3.setFixedHeight(30)
        self.label.move(90, 30)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label2.move(90, 90)
        self.label2.setAlignment(QtCore.Qt.AlignCenter)
        self.label3.move(90, 150)
        self.label3.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPixelSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label2.setFont(font)
        self.label3.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label3.setStyleSheet("color: rgb(255, 255, 255);")

        button1 = QPushButton("OK", self)
        button1.setGeometry(207, 200, 170, 35)
        button1.setFixedWidth(100)
        button1.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button1.setFont(font)
        button1.setStyleSheet("color: rgb(255, 255, 255);")
        button1.clicked.connect(self.CloseWindow)

    def CloseWindow(self):
        self.close()


def CloseMainWindow():
    sys.exit()


class Ui_Exit_Dialog(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(Ui_Exit_Dialog, self).__init__(*args, **kwargs)

        self.setWindowTitle("Closing")
        self.setFixedWidth(530)
        self.setFixedHeight(250)
        self.setGeometry(300, 150, 170, 35)
        self.setStyleSheet("background-image: url(./image/Dialog_Background_1.jpg);")
        app_icon = QIcon("./image/muselab_icon.jpg")
        self.setWindowIcon(app_icon)
        self.UiComponents()
        self.show()

    def UiComponents(self):
        label = QLabel(" Do you really want to close this window?", self)
        label.setGeometry(30, 50, 475, 27)
        font = QtGui.QFont()
        font.setPixelSize(22)
        font.setBold(True)
        font.setWeight(75)
        label.setFont(font)
        label.setStyleSheet("color: rgb(255, 255, 255);")

        button1 = QPushButton("YES", self)
        button1.setGeometry(60, 150, 170, 35)
        button1.setFixedWidth(170)
        button1.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button1.setFont(font)
        button1.setStyleSheet("color: rgb(255, 255, 255);")
        button1.clicked.connect(CloseMainWindow)

        button2 = QPushButton("No", self)
        button2.setGeometry(300, 150, 170, 35)
        button2.setFixedWidth(170)
        button2.setFixedHeight(35)
        font = QtGui.QFont()
        font.setPixelSize(18)
        font.setBold(True)
        button2.setFont(font)
        button2.setStyleSheet("color: rgb(255, 255, 255);")
        button2.clicked.connect(self.CloseState)

    def CloseState(self):
        self.close()


def Website():
    webbrowser.open('https://prescottlai.wixsite.com/website-1/contact')


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MuseLab")
        MainWindow.resize(1125, 748)
        MainWindow.setMaximumSize(QtCore.QSize(1125, 748))
        # MainWindow.setMinimumSize(QtCore.QSize(1125, 748))
        # MainWindow.setStyleSheet("background-image: url(./image/music.jpg);background-repeat: no-repeat;")
        # originally it is :/music.jpg, but it is wrong with“ ：”， should be "."
        app_icon = QIcon("./image/muselab_icon.jpg")
        MainWindow.setWindowIcon(app_icon)
        self.center()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("background-image: url(./image/music.jpg);")
        self.selectFile = QtWidgets.QPushButton(self.centralwidget)
        self.selectFile.setGeometry(QtCore.QRect(470, 270, 201, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPixelSize(16)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.selectFile.setFont(font)
        # self.selectFile.setStyleSheet("QToolTip{border:1px solid rgb(118, 118, 118); "
        #                               "background-color: #ffffff; color:#484848; font-size:12px;}")
        # 设置边框, 边框色, 背景色, 字体色, 字号
        self.selectFile.setStyleSheet("color:rgb(255, 170, 0); background-color: rgb(229, 251, 255)")
        self.selectFile.setObjectName("selectFile")
        self.selectFile.setToolTip("Click and Open the file dialog")
        self.welcomeSentence = QtWidgets.QLabel(self.centralwidget)
        self.welcomeSentence.setGeometry(QtCore.QRect(320, 150, 511, 41))
        # self.welcomeSentence = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Pyunji R")
        font.setPixelSize(28)
        self.welcomeSentence.setFont(font)
        self.welcomeSentence.setAutoFillBackground(False)
        # self.welcomeSentence.setStyleSheet("color: #ef9072; border: rgb(255, 255, 255)")
        self.welcomeSentence.setStyleSheet(
            "background-image: url(./image/transparent.jpg); color: #ef9072; border: rgb(255, 255, 255)")
        self.welcomeSentence.setAlignment(QtCore.Qt.AlignCenter)
        self.welcomeSentence.setObjectName("welcomeSentence")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1125, 26))
        self.menubar.setAutoFillBackground(False)
        self.menubar.setStyleSheet("background-color:silver")
        self.menubar.setStyleSheet(
            "QMenuBar{background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 white, stop:1 grey);"
            "spacing:5px;border:1px solid};"
        )

        file_check = open("record.txt", "r", encoding='utf-8')
        self.lines = file_check.readlines()
        file_check.close()
        self.file_flag = 0
        self.recently = ["....","....","...."]
        for i in range(len(self.lines)):
            self.recently[i] = self.lines[i]

        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuRecent = QtWidgets.QMenu(self.menuFile)
        self.menuRecent.setObjectName("menuRecent")
        self.menuImport = QtWidgets.QMenu(self.menuFile)
        self.menuImport.setObjectName("menuImport")
        self.menuSetting = QtWidgets.QMenu(self.menubar)
        self.menuSetting.setObjectName("menuSetting")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuProperties = QtWidgets.QMenu(self.menubar)
        self.menuProperties.setObjectName("menuProperties")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNewProject = QtWidgets.QAction(MainWindow)
        self.actionNewProject.setEnabled(True)
        self.actionNewProject.setObjectName("actionNewProject")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.action_4 = QtWidgets.QAction(MainWindow)
        self.action_4.setObjectName("action_4")
        self.actionOpenFIle = QtWidgets.QAction(MainWindow)
        self.actionOpenFIle.setCheckable(True)
        self.actionOpenFIle.setEnabled(False)
        font = QtGui.QFont()
        self.actionOpenFIle.setFont(font)
        self.actionOpenFIle.setObjectName("actionOpenFIle")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionMIDI_File = QtWidgets.QAction(MainWindow)
        self.actionMIDI_File.setObjectName("actionMIDI_File")
        self.actionMuseLab_File = QtWidgets.QAction(MainWindow)
        self.actionMuseLab_File.setObjectName("actionMuseLab_File")
        self.actionProperties = QtWidgets.QAction(MainWindow)
        self.actionProperties.setObjectName("actionProperties")
        self.actionWindow_SIze = QtWidgets.QAction(MainWindow)
        self.actionWindow_SIze.setObjectName("actionWindow_SIze")
        self.actionMinimize = QtWidgets.QAction(MainWindow)
        self.actionMinimize.setObjectName("actionMinimize")
        self.actionMaximize = QtWidgets.QAction(MainWindow)
        self.actionMaximize.setObjectName("actionMaximize")
        self.actionMinimize_2 = QtWidgets.QAction(MainWindow)
        self.actionMinimize_2.setObjectName("actionMinimize_2")
        self.actionMaximize_2 = QtWidgets.QAction(MainWindow)
        self.actionMaximize_2.setObjectName("actionMaximize_2")
        self.actionContact_Us = QtWidgets.QAction(MainWindow)
        self.actionContact_Us.setObjectName("actionContact_Us")
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setObjectName("actionHelp")
        self.menuRecent.addAction(self.action_2)
        self.menuRecent.addAction(self.action_3)
        self.menuRecent.addAction(self.action_4)
        self.menuImport.addAction(self.actionMIDI_File)
        self.menuImport.addAction(self.actionMuseLab_File)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionNewProject)
        self.menuFile.addAction(self.menuRecent.menuAction())
        self.menuFile.addAction(self.actionOpenFIle)
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.menuImport.menuAction())
        self.menuSetting.addAction(self.actionProperties)
        self.menuSetting.addAction(self.actionWindow_SIze)
        self.menuHelp.addAction(self.actionContact_Us)
        self.menuHelp.addAction(self.actionHelp)
        self.menuProperties.addAction(self.actionMinimize_2)
        self.menuProperties.addAction(self.actionMaximize_2)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())
        self.menubar.addAction(self.menuProperties.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.retranslateUi(MainWindow)
        self.selectFile.clicked.connect(self.buttonClicked)
        # self.actionClose.triggered.connect(MainWindow.close)
        self.actionClose.triggered.connect(self.closeState)
        self.actionHelp.triggered.connect(self.HelpScreen)
        self.actionContact_Us.triggered.connect(Website)
        self.action_2.triggered.connect(self.quickload1)
        self.action_3.triggered.connect(self.quickload2)
        self.action_4.triggered.connect(self.quickload3)
        # self.actionNewProject.triggered.connect(MainWindow.buttonClicked)
        # self.actionMinimize.triggered.connect(MainWindow.showMinimized)
        # self.actionMaximize.triggered.connect(MainWindow.showMaximized)
        # self.actionProperties.triggered.connect(self.yay)
        # self.actionOpenFIle.triggered.connect(MainWindow.buttonClicked)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # PLAY BACKGROUND MUSIC

    def quickload1(self):
        fp = self.lines[0].rstrip("\n")
        print(fp)
        print("check")
        self.sub = SubWindow()
        self.sub.string = self.lines[0].rstrip("\n")  # passes the string to new window
        # self.sub.show()
        mainWindows.hide()

    def quickload2(self):
        fp = self.lines[1].rstrip("\n")
        print(fp)
        print("check")
        self.sub = SubWindow()
        self.sub.string = self.lines[1].rstrip("\n")  # passes the string to new window
        # self.sub.show()
        mainWindows.hide()

    def quickload3(self):
        fp = self.lines[2].rstrip("\n")
        print(fp)
        self.sub = SubWindow()
        self.sub.string = self.lines[2].rstrip("\n")  # passes the string to new window
        # self.sub.show()
        mainWindows.hide()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def closeState(self):
        print("close for sure?")
        self.sub = Ui_Exit_Dialog()
        self.sub.show()

    def HelpScreen(self):
        self.sub = HelpScreen()
        self.sub.show()
        # self.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MuseLab"))
        self.selectFile.setText(_translate("MainWindow", "Select MIDI File"))
        self.welcomeSentence.setText(_translate("MainWindow", "Welcome  To  The  MuseLab"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuRecent.setTitle(_translate("MainWindow", "Recent"))
        self.menuImport.setTitle(_translate("MainWindow", "Import"))
        self.menuSetting.setTitle(_translate("MainWindow", "Setting"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuProperties.setTitle(_translate("MainWindow", "Window"))
        self.actionNewProject.setText(_translate("MainWindow", "New Project"))
        self.action_2.setText(_translate("MainWindow", self.recently[0]))
        self.action_3.setText(_translate("MainWindow", self.recently[1]))
        self.action_4.setText(_translate("MainWindow", self.recently[2]))
        self.actionOpenFIle.setText(_translate("MainWindow", "Open File"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionClose.setShortcut(_translate("MainWindow", "Esc"))
        self.actionMIDI_File.setText(_translate("MainWindow", "MIDI File"))
        self.actionMuseLab_File.setText(_translate("MainWindow", "MuseLab File"))
        self.actionProperties.setText(_translate("MainWindow", "Properties"))
        self.actionWindow_SIze.setText(_translate("MainWindow", "Window SIze"))
        self.actionMinimize.setText(_translate("MainWindow", "Minimize"))
        self.actionMaximize.setText(_translate("MainWindow", "Maximize"))
        self.actionMinimize_2.setText(_translate("MainWindow", "Minimize"))
        self.actionMaximize_2.setText(_translate("MainWindow", "Maximize"))
        self.actionContact_Us.setText(_translate("MainWindow", "Contact Us"))
        self.actionHelp.setText(_translate("MainWindow", "Help"))

    def buttonClicked(self):
        # print("Button pressed!")
        self.open_dialog_box()



    def open_dialog_box(self):
        Filename = QFileDialog.getOpenFileName()
        path = Filename[0]
        test_path = path.lower()
        if test_path.endswith(".mid") is False and path != "":  # invalid file input
            errormsg = QMessageBox()
            errormsg.setStyleSheet("QLabel{min-width: 300px;}")
            errormsg.setWindowTitle("Invalid File!")
            errormsg.setText("Error")
            errormsg.setInformativeText('Requires MIDI file as input!')
            errormsg.exec_()

        elif test_path.endswith(".mid"):  # correct input
            fp = path
            print(fp)

            # file memorizing changes here!!
            print("here run!!")
            print(self.lines)
            if len(self.lines) != 0:
                for i in range(len(self.lines)):
                    if (fp + "\n") == self.lines[i]:
                        self.file_flag = 1
            if self.file_flag == 0 or len(self.lines) == 0:
                self.lines.append(fp + "\n")
            self.file_flag = 0
            if len(self.lines) > 3:
                print("TOO MUCH!!")
                del self.lines[0]
            print(self.lines)
            a_file = open("record.txt", "w", encoding='utf-8')
            for i in range(len(self.lines)):
                a_file.write(self.lines[i])
            a_file.close()

            self.sub = SubWindow()
            self.sub.string = path  # passes the string to new window
            # self.sub.show()
            mainWindows.hide()



if __name__ == '__main__':
    # QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QApplication(sys.argv)
    QFontDatabase.addApplicationFont(os.path.dirname(__file__) + "/Font/Segoe Script.ttf")
    QFontDatabase.addApplicationFont(os.path.dirname(__file__) + "/Font/Pyunji R.ttf")
    QFontDatabase.addApplicationFont(os.path.dirname(__file__) + "/Font/Orange LET.ttf")
    mainWindows = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindows)
    # sound_file = "./music/BackGround_Music/Background_music16s.wav"
    # winsound.PlaySound(sound_file, winsound.SND_FILENAME | winsound.SND_ASYNC)
    mainWindows.show()
    database = QFontDatabase()
    # Checking the Font database. Debug
    for f in database.families():
        if f == "Segoe Script" or f == "Pyunji R" or f == "Orange LET":
            print(f)

sys.exit(app.exec_())
